@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Wangkanai.Architecture.Data
@using Wangkanai.Architecture.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject UserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<h3>Change password</h3>
<StatusMessage Message="@_message" />
<div class="row">
	<div class="col-md-6">
		<EditForm id="change-password-form" Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
			<DataAnnotationsValidator />
			<ValidationSummary class="text-danger" />
			<div class="form-floating mb-3">
				<InputText id="old-password" type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
				<label for="old-password" class="form-label">Old password</label>
				<ValidationMessage For="() => Input.OldPassword" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText id="new-password" type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
				<label for="new-password" class="form-label">New password</label>
				<ValidationMessage For="() => Input.NewPassword" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText id="confirm-password" type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
				<label for="confirm-password" class="form-label">Confirm password</label>
				<ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
			</div>
			<button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
		</EditForm>
	</div>
</div>

@code {
	private string? _message;
	private ApplicationUser _user = default!;
	private bool _hasPassword;

	[SupplyParameterFromForm] private InputModel Input { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		Input ??= new InputModel();

		_user = await UserAccessor.GetRequiredUserAsync();
		_hasPassword = await UserManager.HasPasswordAsync(_user);
		if (!_hasPassword)
		{
			RedirectManager.RedirectTo("/Account/Manage/SetPassword");
			return;
		}
	}

	private async Task OnValidSubmitAsync()
	{
		IdentityResult? changePasswordResult = await UserManager.ChangePasswordAsync(_user, Input.OldPassword!, Input.NewPassword!);
		if (!changePasswordResult.Succeeded)
		{
			_message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
			return;
		}

		await SignInManager.RefreshSignInAsync(_user);
		Logger.LogInformation("User changed their password successfully.");

		RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed");
	}

	private sealed class InputModel
	{
		[Required]
		[DataType(DataType.Password)]
		[Display(Name = "Current password")]
		public string? OldPassword { get; set; }

		[Required]
		[StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
		[DataType(DataType.Password)]
		[Display(Name = "New password")]
		public string? NewPassword { get; set; }

		[DataType(DataType.Password)]
		[Display(Name = "Confirm new password")]
		[Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
		public string? ConfirmPassword { get; set; }
	}

}