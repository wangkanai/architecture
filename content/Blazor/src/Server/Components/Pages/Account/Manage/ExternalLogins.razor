@page "/Account/Manage/ExternalLogins"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.ViewFeatures
@using Wangkanai.Architecture.Data
@using Wangkanai.Architecture.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject UserAccessor UserAccessor
@inject IUserStore<ApplicationUser> UserStore
@inject IdentityRedirectManager RedirectManager

<PageTitle>Manage your external logins</PageTitle>

<StatusMessage />
@if (_currentLogins?.Count > 0)
{
	<h3>Registered Logins</h3>
	<table class="table">
		<tbody>
			@foreach (UserLoginInfo? login in _currentLogins)
			{
				<tr>
					<td id="login-provider-@login.LoginProvider">@login.ProviderDisplayName</td>
					<td>
						@if (_showRemoveButton)
						{
							<form id="remove-login-@login.LoginProvider" @formname="@($"remove-login-{login.LoginProvider}")" @onsubmit="OnSubmitAsync" method="post">
								<AntiforgeryToken />
								<div>
									<input type="hidden" name="@nameof(LoginProvider)" value="@login.LoginProvider" />
									<input type="hidden" name="@nameof(ProviderKey)" value="@login.ProviderKey" />
									<button type="submit" class="btn btn-primary" title="Remove this @login.ProviderDisplayName login from your account">Remove</button>
								</div>
							</form>
						}
						else
						{
							@: &nbsp;
						}
					</td>
				</tr>
			}
		</tbody>
	</table>
}
@if (_otherLogins?.Count > 0)
{
	<h4>Add another service to log in.</h4>
	<hr />
	<form id="link-login-form" class="form-horizontal" action="/Account/Manage/LinkExternalLogin" method="post">
		<AntiforgeryToken />
		<div id="socialLoginList">
			<p>
				@foreach (AuthenticationScheme? provider in _otherLogins)
				{
					<button id="link-login-button-@provider.Name" type="submit" class="btn btn-primary" name="Provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">
						@provider.DisplayName
					</button>
				}
			</p>
		</div>
	</form>
}

@code {
	public const string LinkLoginCallbackAction = "LinkLoginCallback";

	private ApplicationUser _user = default!;
	private IList<UserLoginInfo>? _currentLogins;
	private IList<AuthenticationScheme>? _otherLogins;
	private bool _showRemoveButton;

	[SupplyParameterFromForm] private string? LoginProvider { get; set; }

	[SupplyParameterFromForm] private string? ProviderKey { get; set; }

	[SupplyParameterFromQuery] private string? Action { get; set; }

	[CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		_user = await UserAccessor.GetRequiredUserAsync();
		_currentLogins = await UserManager.GetLoginsAsync(_user);
		_otherLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync())
			.Where(auth => _currentLogins.All(ul => auth.Name != ul.LoginProvider))
			.ToList();

		string? passwordHash = null;
		if (UserStore is IUserPasswordStore<ApplicationUser> userPasswordStore)
		{
			passwordHash = await userPasswordStore.GetPasswordHashAsync(_user, HttpContext.RequestAborted);
		}

		_showRemoveButton = passwordHash is not null || _currentLogins.Count > 1;

		if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LinkLoginCallbackAction)
		{
			await OnGetLinkLoginCallbackAsync();
			return;
		}
	}

	private async Task OnSubmitAsync()
	{
		IdentityResult? result = await UserManager.RemoveLoginAsync(_user, LoginProvider!, ProviderKey!);
		if (!result.Succeeded)
		{
			RedirectManager.RedirectToCurrentPageWithStatus("The external login was not removed.");
			return;
		}

		await SignInManager.RefreshSignInAsync(_user);
		RedirectManager.RedirectToCurrentPageWithStatus("The external login was removed.");
	}

	private async Task OnGetLinkLoginCallbackAsync()
	{
		string? userId = await UserManager.GetUserIdAsync(_user);
		ExternalLoginInfo? info = await SignInManager.GetExternalLoginInfoAsync(userId);
		if (info == null)
		{
			RedirectManager.RedirectToCurrentPageWithStatus("Unexpected error occurred loading external login info.");
			return;
		}

		IdentityResult? result = await UserManager.AddLoginAsync(_user, info);
		if (!result.Succeeded)
		{
			RedirectManager.RedirectToCurrentPageWithStatus("The external login was not added. External logins can only be associated with one account.");
			return;
		}

		// Clear the existing external cookie to ensure a clean login process
		await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

		RedirectManager.RedirectToCurrentPageWithStatus("The external login was added.");
	}

}