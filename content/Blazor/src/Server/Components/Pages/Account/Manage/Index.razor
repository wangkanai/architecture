@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations;
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity;
@using Wangkanai.Architecture.Data;
@using Wangkanai.Architecture.Identity

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject UserAccessor UserAccessor;
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
	<div class="col-md-6">
		<EditForm id="profile-form" Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
			<DataAnnotationsValidator />
			<ValidationSummary class="text-danger" />
			<div class="form-floating mb-3">
				<input id="username" type="text" value="@_username" class="form-control" placeholder="Please choose your username." disabled />
				<label for="username" class="form-label">Username</label>
			</div>
			<div class="form-floating mb-3">
				<InputText id="phone-number" @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
				<label for="phone-number" class="form-label">Phone number</label>
				<ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
			</div>
			<button id="update-profile-button" type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
		</EditForm>
	</div>
</div>

@code {
	private ApplicationUser _user = default!;
	private string? _username;
	private string? _phoneNumber;

	[SupplyParameterFromForm] private InputModel Input { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		Input ??= new InputModel();

		_user = await UserAccessor.GetRequiredUserAsync();
		_username = await UserManager.GetUserNameAsync(_user);
		_phoneNumber = await UserManager.GetPhoneNumberAsync(_user);

		Input.PhoneNumber ??= _phoneNumber;
	}

	private async Task OnValidSubmitAsync()
	{
		if (Input.PhoneNumber != _phoneNumber)
		{
			IdentityResult? setPhoneResult = await UserManager.SetPhoneNumberAsync(_user, Input.PhoneNumber);
			if (!setPhoneResult.Succeeded)
			{
				RedirectManager.RedirectToCurrentPageWithStatus("Unexpected error when trying to set phone number.");
				return;
			}
		}

		await SignInManager.RefreshSignInAsync(_user);
		RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated");
	}

	private sealed class InputModel
	{
		[Phone]
		[Display(Name = "Phone number")]
		public string? PhoneNumber { get; set; }
	}

}