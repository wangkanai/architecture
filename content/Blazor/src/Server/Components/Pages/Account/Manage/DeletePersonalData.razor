@page "/Account/Manage/DeletePersonalData"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Wangkanai.Architecture.Data
@using Wangkanai.Architecture.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject UserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<DeletePersonalData> Logger

<PageTitle>Delete Personal Data</PageTitle>

<StatusMessage Message="@_message" />

<h3>Delete Personal Data</h3>

<div class="alert alert-warning" role="alert">
	<p>
		<strong>Deleting this data will permanently remove your account, and this cannot be recovered.</strong>
	</p>
</div>

<div>
	<EditForm id="delete-user" Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
		<DataAnnotationsValidator />
		<ValidationSummary class="text-danger" />
		@if (_requirePassword)
		{
			<div class="form-floating mb-3">
				<InputText id="password" type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your password." />
				<label for="password" class="form-label">Password</label>
				<ValidationMessage For="() => Input.Password" class="text-danger" />
			</div>
		}
		<button class="w-100 btn btn-lg btn-danger" type="submit">Delete data and close my account</button>
	</EditForm>
</div>

@code {
	private string? _message;
	private ApplicationUser _user = default!;
	private bool _requirePassword;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		Input ??= new InputModel();

		_user = await UserAccessor.GetRequiredUserAsync();
		_requirePassword = await UserManager.HasPasswordAsync(_user);
	}

	private async Task OnValidSubmitAsync()
	{
		if (_requirePassword && !await UserManager.CheckPasswordAsync(_user, Input.Password!))
		{
			_message = "Error: Incorrect password.";
			return;
		}

		IdentityResult? result = await UserManager.DeleteAsync(_user);
		string? userId = await UserManager.GetUserIdAsync(_user);
		if (!result.Succeeded)
		{
			throw new InvalidOperationException($"Unexpected error occurred deleting user.");
		}

		await SignInManager.SignOutAsync();

		Logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

		RedirectManager.RedirectToCurrentPage();
	}

	private sealed class InputModel
	{
		[DataType(DataType.Password)]
		public string? Password { get; set; }
	}

}