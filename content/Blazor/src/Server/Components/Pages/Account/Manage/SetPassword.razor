@page "/Account/Manage/SetPassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Wangkanai.Architecture.Data
@using Wangkanai.Architecture.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject UserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Set password</PageTitle>

<h3>Set your password</h3>
<StatusMessage Message="@_message" />
<p class="text-info">
	You do not have a local username/password for this site. Add a local
	account so you can log in without an external login.
</p>
<div class="row">
	<div class="col-md-6">
		<EditForm id="set-password-form" Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
			<DataAnnotationsValidator />
			<ValidationSummary class="text-danger" />
			<div class="form-floating mb-3">
				<InputText id="new-password" type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" placeholder="Please enter your new password." />
				<label for="new-password" class="form-label">New password</label>
				<ValidationMessage For="() => Input.NewPassword" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText id="confirm-password" type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="Please confirm your new password." />
				<label for="confirm-password" class="form-label">Confirm password</label>
				<ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
			</div>
			<button type="submit" class="w-100 btn btn-lg btn-primary">Set password</button>
		</EditForm>
	</div>
</div>

@code {
	private string? _message;
	private ApplicationUser _user = default!;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		Input ??= new InputModel();

		_user = await UserAccessor.GetRequiredUserAsync();

		bool hasPassword = await UserManager.HasPasswordAsync(_user);
		if (hasPassword)
		{
			RedirectManager.RedirectTo("/Account/Manage/ChangePassword");
			return;
		}
	}

	private async Task OnValidSubmitAsync()
	{
		IdentityResult? addPasswordResult = await UserManager.AddPasswordAsync(_user, Input.NewPassword!);
		if (!addPasswordResult.Succeeded)
		{
			_message = $"Error: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
			return;
		}

		await SignInManager.RefreshSignInAsync(_user);
		RedirectManager.RedirectToCurrentPageWithStatus("Your password has been set.");
	}

	private sealed class InputModel
	{
		[Required]
		[StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
		[DataType(DataType.Password)]
		[Display(Name = "New password")]
		public string? NewPassword { get; set; }

		[DataType(DataType.Password)]
		[Display(Name = "Confirm new password")]
		[Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
		public string? ConfirmPassword { get; set; }
	}

}