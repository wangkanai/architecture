@page "/Account/Manage/ResetAuthenticator"

@using Microsoft.AspNetCore.Identity
@using Wangkanai.Architecture.Data
@using Wangkanai.Architecture.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject UserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ResetAuthenticator> Logger

<PageTitle>Reset authenticator key</PageTitle>

<StatusMessage />
<h3>Reset authenticator key</h3>
<div class="alert alert-warning" role="alert">
	<p>
		<span class="glyphicon glyphicon-warning-sign"></span>
		<strong>If you reset your authenticator key your authenticator app will not work until you reconfigure it.</strong>
	</p>
	<p>
		This process disables 2FA until you verify your authenticator app.
		If you do not complete your authenticator app configuration you may lose access to your account.
	</p>
</div>
<div>
	<form id="reset-authenticator-form" @formname="reset-authenticator" @onsubmit="OnSubmitAsync" method="post">
		<AntiforgeryToken />
		<button id="reset-authenticator-button" class="btn btn-danger" type="submit">Reset authenticator key</button>
	</form>
</div>

@code {
	private ApplicationUser _user = default!;

	protected override async Task OnInitializedAsync()
	{
		_user = await UserAccessor.GetRequiredUserAsync();
	}

	private async Task OnSubmitAsync()
	{
		await UserManager.SetTwoFactorEnabledAsync(_user, false);
		await UserManager.ResetAuthenticatorKeyAsync(_user);
		string? userId = await UserManager.GetUserIdAsync(_user);
		Logger.LogInformation("User with ID '{UserId}' has reset their authentication app key.", _user.Id);

		await SignInManager.RefreshSignInAsync(_user);

		RedirectManager.RedirectToWithStatus(
			"/Account/Manage/EnableAuthenticator",
			"Your authenticator app key has been reset, you will need to configure your authenticator app using the new key.");
	}

}