@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.UI.Services
@using Microsoft.AspNetCore.WebUtilities
@using Wangkanai.Architecture.Data
@using Wangkanai.Architecture.Identity

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Register> Logger
@inject IEmailSender EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
	<div class="col-md-4">
		<StatusMessage Message="@Message" />
		<EditForm id="registerForm" Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
			<DataAnnotationsValidator />
			<h2>Create a new account.</h2>
			<hr />
			<ValidationSummary class="text-danger" />
			<div class="form-floating mb-3">
				<InputText id="email" @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
				<label for="email">Email</label>
				<ValidationMessage For="() => Input.Email" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText id="password" type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
				<label for="password">Password</label>
				<ValidationMessage For="() => Input.Password" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText id="confirm-password" type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
				<label for="confirm-password">Confirm Password</label>
				<ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
			</div>
			<button id="registerSubmit" type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
		</EditForm>
	</div>
	<div class="col-md-6 col-md-offset-2">
		<section>
			<h3>Use another service to register.</h3>
			<hr />
			<ExternalLoginPicker />
		</section>
	</div>
</div>

@code {

	[SupplyParameterFromForm]
	public InputModel Input { get; set; } = default!;

	/// <summary>
	///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
	///     directly from your code. This API may change or be removed in future releases.
	/// </summary>
	[SupplyParameterFromQuery]
	public string ReturnUrl { get; set; } = "";

	/// <summary>
	///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
	///     directly from your code. This API may change or be removed in future releases.
	/// </summary>
	public class InputModel
	{
		/// <summary>
	///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
	///     directly from your code. This API may change or be removed in future releases.
	/// </summary>
		[Required]
		[EmailAddress]
		[Display(Name = "Email")]
		public string Email { get; set; } = null!;

		/// <summary>
	///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
	///     directly from your code. This API may change or be removed in future releases.
	/// </summary>
		[Required]
		[StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
		[DataType(DataType.Password)]
		[Display(Name = "Password")]
		public string Password { get; set; } = null!;

		/// <summary>
	///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
	///     directly from your code. This API may change or be removed in future releases.
	/// </summary>
		[DataType(DataType.Password)]
		[Display(Name = "Confirm password")]
		[Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
		public string ConfirmPassword { get; set; } = null!;
	}

	IEnumerable<IdentityError>? identityErrors;
	string? Message => identityErrors is null ? null : "Error: " + string.Join(", ", identityErrors.Select(error => error.Description));

	protected override void OnInitialized()
	{
		Input ??= new InputModel();
	}

	public async Task RegisterUser(EditContext editContext)
	{
		ApplicationUser? user = CreateUser();

		await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
		IUserEmailStore<ApplicationUser>? emailStore = GetEmailStore();
		await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
		IdentityResult? result = await UserManager.CreateAsync(user, Input.Password);

		if (result.Succeeded)
		{
			Logger.LogInformation("User created a new account with password.");

			string? userId = await UserManager.GetUserIdAsync(user);
			string? code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
			code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
			string? callbackUrl = NavigationManager.GetUriWithQueryParameters(
				NavigationManager.ToAbsoluteUri("/Account/ConfirmEmail").AbsoluteUri,
				new Dictionary<string, object?> { { "userId", userId }, { "code", code }, { "returnUrl", ReturnUrl } });

			await EmailSender.SendEmailAsync(Input.Email, "Confirm your email",
				$"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

			if (UserManager.Options.SignIn.RequireConfirmedAccount)
			{
				RedirectManager.RedirectTo(
					"/Account/RegisterConfirmation",
					new Dictionary<string, object?> { ["Email"] = Input.Email, ["ReturnUrl"] = ReturnUrl });
			}
			else
			{
				await SignInManager.SignInAsync(user, false);
				RedirectManager.RedirectTo(ReturnUrl);
			}
		}
		else
		{
			identityErrors = result.Errors;
		}
	}

	private ApplicationUser CreateUser()
	{
		try
		{
			return Activator.CreateInstance<ApplicationUser>();
		}
		catch
		{
			throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
			                                    $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
		}
	}

	private IUserEmailStore<ApplicationUser> GetEmailStore()
	{
		if (!UserManager.SupportsUserEmail)
		{
			throw new NotSupportedException("The default UI requires a user store with email support.");
		}
		return (IUserEmailStore<ApplicationUser>)UserStore;
	}

}